// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	apiproto "github.com/Alibay/go-kit/centrifugo/proto"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// CentrifugoApiClient is an autogenerated mock type for the CentrifugoApiClient type
type CentrifugoApiClient struct {
	mock.Mock
}

// Batch provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) Batch(ctx context.Context, in *apiproto.BatchRequest, opts ...grpc.CallOption) (*apiproto.BatchResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.BatchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.BatchRequest, ...grpc.CallOption) (*apiproto.BatchResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.BatchRequest, ...grpc.CallOption) *apiproto.BatchResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.BatchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.BatchRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockUser provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) BlockUser(ctx context.Context, in *apiproto.BlockUserRequest, opts ...grpc.CallOption) (*apiproto.BlockUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.BlockUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.BlockUserRequest, ...grpc.CallOption) (*apiproto.BlockUserResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.BlockUserRequest, ...grpc.CallOption) *apiproto.BlockUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.BlockUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.BlockUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Broadcast provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) Broadcast(ctx context.Context, in *apiproto.BroadcastRequest, opts ...grpc.CallOption) (*apiproto.BroadcastResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.BroadcastResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.BroadcastRequest, ...grpc.CallOption) (*apiproto.BroadcastResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.BroadcastRequest, ...grpc.CallOption) *apiproto.BroadcastResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.BroadcastResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.BroadcastRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelPush provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) CancelPush(ctx context.Context, in *apiproto.CancelPushRequest, opts ...grpc.CallOption) (*apiproto.CancelPushResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.CancelPushResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.CancelPushRequest, ...grpc.CallOption) (*apiproto.CancelPushResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.CancelPushRequest, ...grpc.CallOption) *apiproto.CancelPushResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.CancelPushResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.CancelPushRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Channels provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) Channels(ctx context.Context, in *apiproto.ChannelsRequest, opts ...grpc.CallOption) (*apiproto.ChannelsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.ChannelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.ChannelsRequest, ...grpc.CallOption) (*apiproto.ChannelsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.ChannelsRequest, ...grpc.CallOption) *apiproto.ChannelsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.ChannelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.ChannelsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Connections provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) Connections(ctx context.Context, in *apiproto.ConnectionsRequest, opts ...grpc.CallOption) (*apiproto.ConnectionsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.ConnectionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.ConnectionsRequest, ...grpc.CallOption) (*apiproto.ConnectionsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.ConnectionsRequest, ...grpc.CallOption) *apiproto.ConnectionsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.ConnectionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.ConnectionsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserStatus provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) DeleteUserStatus(ctx context.Context, in *apiproto.DeleteUserStatusRequest, opts ...grpc.CallOption) (*apiproto.DeleteUserStatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.DeleteUserStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.DeleteUserStatusRequest, ...grpc.CallOption) (*apiproto.DeleteUserStatusResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.DeleteUserStatusRequest, ...grpc.CallOption) *apiproto.DeleteUserStatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.DeleteUserStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.DeleteUserStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceList provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) DeviceList(ctx context.Context, in *apiproto.DeviceListRequest, opts ...grpc.CallOption) (*apiproto.DeviceListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.DeviceListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.DeviceListRequest, ...grpc.CallOption) (*apiproto.DeviceListResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.DeviceListRequest, ...grpc.CallOption) *apiproto.DeviceListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.DeviceListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.DeviceListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceRegister provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) DeviceRegister(ctx context.Context, in *apiproto.DeviceRegisterRequest, opts ...grpc.CallOption) (*apiproto.DeviceRegisterResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.DeviceRegisterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.DeviceRegisterRequest, ...grpc.CallOption) (*apiproto.DeviceRegisterResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.DeviceRegisterRequest, ...grpc.CallOption) *apiproto.DeviceRegisterResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.DeviceRegisterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.DeviceRegisterRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceRemove provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) DeviceRemove(ctx context.Context, in *apiproto.DeviceRemoveRequest, opts ...grpc.CallOption) (*apiproto.DeviceRemoveResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.DeviceRemoveResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.DeviceRemoveRequest, ...grpc.CallOption) (*apiproto.DeviceRemoveResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.DeviceRemoveRequest, ...grpc.CallOption) *apiproto.DeviceRemoveResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.DeviceRemoveResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.DeviceRemoveRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceTopicList provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) DeviceTopicList(ctx context.Context, in *apiproto.DeviceTopicListRequest, opts ...grpc.CallOption) (*apiproto.DeviceTopicListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.DeviceTopicListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.DeviceTopicListRequest, ...grpc.CallOption) (*apiproto.DeviceTopicListResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.DeviceTopicListRequest, ...grpc.CallOption) *apiproto.DeviceTopicListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.DeviceTopicListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.DeviceTopicListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceTopicUpdate provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) DeviceTopicUpdate(ctx context.Context, in *apiproto.DeviceTopicUpdateRequest, opts ...grpc.CallOption) (*apiproto.DeviceTopicUpdateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.DeviceTopicUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.DeviceTopicUpdateRequest, ...grpc.CallOption) (*apiproto.DeviceTopicUpdateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.DeviceTopicUpdateRequest, ...grpc.CallOption) *apiproto.DeviceTopicUpdateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.DeviceTopicUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.DeviceTopicUpdateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceUpdate provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) DeviceUpdate(ctx context.Context, in *apiproto.DeviceUpdateRequest, opts ...grpc.CallOption) (*apiproto.DeviceUpdateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.DeviceUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.DeviceUpdateRequest, ...grpc.CallOption) (*apiproto.DeviceUpdateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.DeviceUpdateRequest, ...grpc.CallOption) *apiproto.DeviceUpdateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.DeviceUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.DeviceUpdateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Disconnect provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) Disconnect(ctx context.Context, in *apiproto.DisconnectRequest, opts ...grpc.CallOption) (*apiproto.DisconnectResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.DisconnectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.DisconnectRequest, ...grpc.CallOption) (*apiproto.DisconnectResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.DisconnectRequest, ...grpc.CallOption) *apiproto.DisconnectResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.DisconnectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.DisconnectRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserStatus provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) GetUserStatus(ctx context.Context, in *apiproto.GetUserStatusRequest, opts ...grpc.CallOption) (*apiproto.GetUserStatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.GetUserStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.GetUserStatusRequest, ...grpc.CallOption) (*apiproto.GetUserStatusResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.GetUserStatusRequest, ...grpc.CallOption) *apiproto.GetUserStatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.GetUserStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.GetUserStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// History provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) History(ctx context.Context, in *apiproto.HistoryRequest, opts ...grpc.CallOption) (*apiproto.HistoryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.HistoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.HistoryRequest, ...grpc.CallOption) (*apiproto.HistoryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.HistoryRequest, ...grpc.CallOption) *apiproto.HistoryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.HistoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.HistoryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HistoryRemove provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) HistoryRemove(ctx context.Context, in *apiproto.HistoryRemoveRequest, opts ...grpc.CallOption) (*apiproto.HistoryRemoveResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.HistoryRemoveResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.HistoryRemoveRequest, ...grpc.CallOption) (*apiproto.HistoryRemoveResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.HistoryRemoveRequest, ...grpc.CallOption) *apiproto.HistoryRemoveResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.HistoryRemoveResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.HistoryRemoveRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Info provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) Info(ctx context.Context, in *apiproto.InfoRequest, opts ...grpc.CallOption) (*apiproto.InfoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.InfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.InfoRequest, ...grpc.CallOption) (*apiproto.InfoResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.InfoRequest, ...grpc.CallOption) *apiproto.InfoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.InfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.InfoRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvalidateUserTokens provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) InvalidateUserTokens(ctx context.Context, in *apiproto.InvalidateUserTokensRequest, opts ...grpc.CallOption) (*apiproto.InvalidateUserTokensResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.InvalidateUserTokensResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.InvalidateUserTokensRequest, ...grpc.CallOption) (*apiproto.InvalidateUserTokensResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.InvalidateUserTokensRequest, ...grpc.CallOption) *apiproto.InvalidateUserTokensResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.InvalidateUserTokensResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.InvalidateUserTokensRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Presence provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) Presence(ctx context.Context, in *apiproto.PresenceRequest, opts ...grpc.CallOption) (*apiproto.PresenceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.PresenceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.PresenceRequest, ...grpc.CallOption) (*apiproto.PresenceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.PresenceRequest, ...grpc.CallOption) *apiproto.PresenceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.PresenceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.PresenceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PresenceStats provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) PresenceStats(ctx context.Context, in *apiproto.PresenceStatsRequest, opts ...grpc.CallOption) (*apiproto.PresenceStatsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.PresenceStatsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.PresenceStatsRequest, ...grpc.CallOption) (*apiproto.PresenceStatsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.PresenceStatsRequest, ...grpc.CallOption) *apiproto.PresenceStatsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.PresenceStatsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.PresenceStatsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Publish provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) Publish(ctx context.Context, in *apiproto.PublishRequest, opts ...grpc.CallOption) (*apiproto.PublishResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.PublishResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.PublishRequest, ...grpc.CallOption) (*apiproto.PublishResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.PublishRequest, ...grpc.CallOption) *apiproto.PublishResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.PublishResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.PublishRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RPC provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) RPC(ctx context.Context, in *apiproto.RPCRequest, opts ...grpc.CallOption) (*apiproto.RPCResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.RPCResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.RPCRequest, ...grpc.CallOption) (*apiproto.RPCResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.RPCRequest, ...grpc.CallOption) *apiproto.RPCResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.RPCResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.RPCRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RateLimit provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) RateLimit(ctx context.Context, in *apiproto.RateLimitRequest, opts ...grpc.CallOption) (*apiproto.RateLimitResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.RateLimitResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.RateLimitRequest, ...grpc.CallOption) (*apiproto.RateLimitResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.RateLimitRequest, ...grpc.CallOption) *apiproto.RateLimitResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.RateLimitResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.RateLimitRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Refresh provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) Refresh(ctx context.Context, in *apiproto.RefreshRequest, opts ...grpc.CallOption) (*apiproto.RefreshResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.RefreshResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.RefreshRequest, ...grpc.CallOption) (*apiproto.RefreshResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.RefreshRequest, ...grpc.CallOption) *apiproto.RefreshResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.RefreshResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.RefreshRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeToken provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) RevokeToken(ctx context.Context, in *apiproto.RevokeTokenRequest, opts ...grpc.CallOption) (*apiproto.RevokeTokenResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.RevokeTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.RevokeTokenRequest, ...grpc.CallOption) (*apiproto.RevokeTokenResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.RevokeTokenRequest, ...grpc.CallOption) *apiproto.RevokeTokenResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.RevokeTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.RevokeTokenRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendPushNotification provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) SendPushNotification(ctx context.Context, in *apiproto.SendPushNotificationRequest, opts ...grpc.CallOption) (*apiproto.SendPushNotificationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.SendPushNotificationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.SendPushNotificationRequest, ...grpc.CallOption) (*apiproto.SendPushNotificationResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.SendPushNotificationRequest, ...grpc.CallOption) *apiproto.SendPushNotificationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.SendPushNotificationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.SendPushNotificationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Subscribe provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) Subscribe(ctx context.Context, in *apiproto.SubscribeRequest, opts ...grpc.CallOption) (*apiproto.SubscribeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.SubscribeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.SubscribeRequest, ...grpc.CallOption) (*apiproto.SubscribeResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.SubscribeRequest, ...grpc.CallOption) *apiproto.SubscribeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.SubscribeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.SubscribeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnblockUser provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) UnblockUser(ctx context.Context, in *apiproto.UnblockUserRequest, opts ...grpc.CallOption) (*apiproto.UnblockUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.UnblockUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.UnblockUserRequest, ...grpc.CallOption) (*apiproto.UnblockUserResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.UnblockUserRequest, ...grpc.CallOption) *apiproto.UnblockUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.UnblockUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.UnblockUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unsubscribe provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) Unsubscribe(ctx context.Context, in *apiproto.UnsubscribeRequest, opts ...grpc.CallOption) (*apiproto.UnsubscribeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.UnsubscribeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.UnsubscribeRequest, ...grpc.CallOption) (*apiproto.UnsubscribeResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.UnsubscribeRequest, ...grpc.CallOption) *apiproto.UnsubscribeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.UnsubscribeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.UnsubscribeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePushStatus provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) UpdatePushStatus(ctx context.Context, in *apiproto.UpdatePushStatusRequest, opts ...grpc.CallOption) (*apiproto.UpdatePushStatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.UpdatePushStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.UpdatePushStatusRequest, ...grpc.CallOption) (*apiproto.UpdatePushStatusResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.UpdatePushStatusRequest, ...grpc.CallOption) *apiproto.UpdatePushStatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.UpdatePushStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.UpdatePushStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserStatus provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) UpdateUserStatus(ctx context.Context, in *apiproto.UpdateUserStatusRequest, opts ...grpc.CallOption) (*apiproto.UpdateUserStatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.UpdateUserStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.UpdateUserStatusRequest, ...grpc.CallOption) (*apiproto.UpdateUserStatusResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.UpdateUserStatusRequest, ...grpc.CallOption) *apiproto.UpdateUserStatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.UpdateUserStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.UpdateUserStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserTopicList provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) UserTopicList(ctx context.Context, in *apiproto.UserTopicListRequest, opts ...grpc.CallOption) (*apiproto.UserTopicListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.UserTopicListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.UserTopicListRequest, ...grpc.CallOption) (*apiproto.UserTopicListResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.UserTopicListRequest, ...grpc.CallOption) *apiproto.UserTopicListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.UserTopicListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.UserTopicListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserTopicUpdate provides a mock function with given fields: ctx, in, opts
func (_m *CentrifugoApiClient) UserTopicUpdate(ctx context.Context, in *apiproto.UserTopicUpdateRequest, opts ...grpc.CallOption) (*apiproto.UserTopicUpdateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *apiproto.UserTopicUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.UserTopicUpdateRequest, ...grpc.CallOption) (*apiproto.UserTopicUpdateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.UserTopicUpdateRequest, ...grpc.CallOption) *apiproto.UserTopicUpdateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.UserTopicUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.UserTopicUpdateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCentrifugoApiClient creates a new instance of CentrifugoApiClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCentrifugoApiClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *CentrifugoApiClient {
	mock := &CentrifugoApiClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
