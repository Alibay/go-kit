// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	elasticsearch "github.com/Alibay/go-kit/elasticsearch"
	elastic "github.com/olivere/elastic/v7"

	mock "github.com/stretchr/testify/mock"
)

// Search is an autogenerated mock type for the Search type
type Search struct {
	mock.Mock
}

// Close provides a mock function with given fields: ctx
func (_m *Search) Close(ctx context.Context) {
	_m.Called(ctx)
}

// Delete provides a mock function with given fields: ctx, index, id
func (_m *Search) Delete(ctx context.Context, index string, id string) error {
	ret := _m.Called(ctx, index, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, index, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBulk provides a mock function with given fields: ctx, index, ids
func (_m *Search) DeleteBulk(ctx context.Context, index string, ids []string) error {
	ret := _m.Called(ctx, index, ids)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, index, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: ctx, index, id
func (_m *Search) Exists(ctx context.Context, index string, id string) (bool, error) {
	ret := _m.Called(ctx, index, id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, index, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, index, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, index, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClient provides a mock function with given fields:
func (_m *Search) GetClient() *elastic.Client {
	ret := _m.Called()

	var r0 *elastic.Client
	if rf, ok := ret.Get(0).(func() *elastic.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elastic.Client)
		}
	}

	return r0
}

// Index provides a mock function with given fields: ctx, index, id, data
func (_m *Search) Index(ctx context.Context, index string, id string, data interface{}) error {
	ret := _m.Called(ctx, index, id, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) error); ok {
		r0 = rf(ctx, index, id, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IndexAsync provides a mock function with given fields: ctx, index, id, data
func (_m *Search) IndexAsync(ctx context.Context, index string, id string, data interface{}) {
	_m.Called(ctx, index, id, data)
}

// IndexBulk provides a mock function with given fields: ctx, index, docs
func (_m *Search) IndexBulk(ctx context.Context, index string, docs map[string]interface{}) error {
	ret := _m.Called(ctx, index, docs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) error); ok {
		r0 = rf(ctx, index, docs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IndexBulkAsync provides a mock function with given fields: ctx, index, docs
func (_m *Search) IndexBulkAsync(ctx context.Context, index string, docs map[string]interface{}) {
	_m.Called(ctx, index, docs)
}

// NewBuilder provides a mock function with given fields:
func (_m *Search) NewBuilder() elasticsearch.IndexBuilder {
	ret := _m.Called()

	var r0 elasticsearch.IndexBuilder
	if rf, ok := ret.Get(0).(func() elasticsearch.IndexBuilder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(elasticsearch.IndexBuilder)
		}
	}

	return r0
}

// Ping provides a mock function with given fields:
func (_m *Search) Ping() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Refresh provides a mock function with given fields: ctx, index
func (_m *Search) Refresh(ctx context.Context, index string) error {
	ret := _m.Called(ctx, index)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, index)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSearch creates a new instance of Search. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSearch(t interface {
	mock.TestingT
	Cleanup(func())
}) *Search {
	mock := &Search{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
