// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	kafka "github.com/Alibay/go-kit/kafka"
	mock "github.com/stretchr/testify/mock"
)

// Producer is an autogenerated mock type for the Producer type
type Producer struct {
	mock.Mock
}

// Send provides a mock function with given fields: ctx, key, payload
func (_m *Producer) Send(ctx context.Context, key string, payload interface{}) error {
	ret := _m.Called(ctx, key, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, key, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendMany provides a mock function with given fields: ctx, messages
func (_m *Producer) SendMany(ctx context.Context, messages ...*kafka.Message) error {
	_va := make([]interface{}, len(messages))
	for _i := range messages {
		_va[_i] = messages[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...*kafka.Message) error); ok {
		r0 = rf(ctx, messages...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProducer creates a new instance of Producer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProducer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Producer {
	mock := &Producer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
