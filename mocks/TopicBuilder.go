// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	kafka "github.com/Alibay/go-kit/kafka"
	mock "github.com/stretchr/testify/mock"
)

// TopicBuilder is an autogenerated mock type for the TopicBuilder type
type TopicBuilder struct {
	mock.Mock
}

// Build provides a mock function with given fields:
func (_m *TopicBuilder) Build() *kafka.TopicConfig {
	ret := _m.Called()

	var r0 *kafka.TopicConfig
	if rf, ok := ret.Get(0).(func() *kafka.TopicConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafka.TopicConfig)
		}
	}

	return r0
}

// WithParams provides a mock function with given fields: params
func (_m *TopicBuilder) WithParams(params ...kafka.TopicParam) kafka.TopicBuilder {
	_va := make([]interface{}, len(params))
	for _i := range params {
		_va[_i] = params[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 kafka.TopicBuilder
	if rf, ok := ret.Get(0).(func(...kafka.TopicParam) kafka.TopicBuilder); ok {
		r0 = rf(params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kafka.TopicBuilder)
		}
	}

	return r0
}

// WithPartitionNum provides a mock function with given fields: num
func (_m *TopicBuilder) WithPartitionNum(num int) kafka.TopicBuilder {
	ret := _m.Called(num)

	var r0 kafka.TopicBuilder
	if rf, ok := ret.Get(0).(func(int) kafka.TopicBuilder); ok {
		r0 = rf(num)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kafka.TopicBuilder)
		}
	}

	return r0
}

// NewTopicBuilder creates a new instance of TopicBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTopicBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *TopicBuilder {
	mock := &TopicBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
