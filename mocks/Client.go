// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	centrifuge "github.com/centrifugal/centrifuge-go"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// ClientId provides a mock function with given fields:
func (_m *Client) ClientId() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Close provides a mock function with given fields: ctx
func (_m *Client) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connect provides a mock function with given fields: ctx, token
func (_m *Client) Connect(ctx context.Context, token string) error {
	ret := _m.Called(ctx, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connected provides a mock function with given fields:
func (_m *Client) Connected() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// OnPublication provides a mock function with given fields: ctx, handler
func (_m *Client) OnPublication(ctx context.Context, handler func(centrifuge.ServerPublicationEvent) error) error {
	ret := _m.Called(ctx, handler)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(centrifuge.ServerPublicationEvent) error) error); ok {
		r0 = rf(ctx, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: ctx, token, channel, handler
func (_m *Client) Subscribe(ctx context.Context, token string, channel string, handler func(centrifuge.Publication) error) error {
	ret := _m.Called(ctx, token, channel, handler)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, func(centrifuge.Publication) error) error); ok {
		r0 = rf(ctx, token, channel, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
