// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	kafka "github.com/Alibay/go-kit/kafka"
	mock "github.com/stretchr/testify/mock"
)

// Broker is an autogenerated mock type for the Broker type
type Broker struct {
	mock.Mock
}

// AddProducer provides a mock function with given fields: ctx, topic, cfg
func (_m *Broker) AddProducer(ctx context.Context, topic *kafka.TopicConfig, cfg *kafka.ProducerConfig) (kafka.Producer, error) {
	ret := _m.Called(ctx, topic, cfg)

	var r0 kafka.Producer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kafka.TopicConfig, *kafka.ProducerConfig) (kafka.Producer, error)); ok {
		return rf(ctx, topic, cfg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kafka.TopicConfig, *kafka.ProducerConfig) kafka.Producer); ok {
		r0 = rf(ctx, topic, cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kafka.Producer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kafka.TopicConfig, *kafka.ProducerConfig) error); ok {
		r1 = rf(ctx, topic, cfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddSubscriber provides a mock function with given fields: ctx, topic, cfg, handlers
func (_m *Broker) AddSubscriber(ctx context.Context, topic *kafka.TopicConfig, cfg *kafka.SubscriberConfig, handlers ...kafka.HandlerFn) error {
	_va := make([]interface{}, len(handlers))
	for _i := range handlers {
		_va[_i] = handlers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, topic, cfg)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *kafka.TopicConfig, *kafka.SubscriberConfig, ...kafka.HandlerFn) error); ok {
		r0 = rf(ctx, topic, cfg, handlers...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields: ctx
func (_m *Broker) Close(ctx context.Context) {
	_m.Called(ctx)
}

// DeclareTopics provides a mock function with given fields: ctx
func (_m *Broker) DeclareTopics(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Init provides a mock function with given fields: ctx, cfg
func (_m *Broker) Init(ctx context.Context, cfg *kafka.BrokerConfig) error {
	ret := _m.Called(ctx, cfg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *kafka.BrokerConfig) error); ok {
		r0 = rf(ctx, cfg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: ctx
func (_m *Broker) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBroker creates a new instance of Broker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBroker(t interface {
	mock.TestingT
	Cleanup(func())
}) *Broker {
	mock := &Broker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
