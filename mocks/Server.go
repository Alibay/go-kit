// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	apiproto "github.com/Alibay/go-kit/centrifugo/proto"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Server is an autogenerated mock type for the Server type
type Server struct {
	mock.Mock
}

// Close provides a mock function with given fields: ctx
func (_m *Server) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connect provides a mock function with given fields: ctx
func (_m *Server) Connect(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPresence provides a mock function with given fields: ctx, channel
func (_m *Server) GetPresence(ctx context.Context, channel string) (*apiproto.PresenceResult, error) {
	ret := _m.Called(ctx, channel)

	var r0 *apiproto.PresenceResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*apiproto.PresenceResult, error)); ok {
		return rf(ctx, channel)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *apiproto.PresenceResult); ok {
		r0 = rf(ctx, channel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.PresenceResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, channel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Publish provides a mock function with given fields: ctx, channel, msg
func (_m *Server) Publish(ctx context.Context, channel string, msg interface{}) error {
	ret := _m.Called(ctx, channel, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, channel, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewServer creates a new instance of Server. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Server {
	mock := &Server{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
