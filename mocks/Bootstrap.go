// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Bootstrap is an autogenerated mock type for the Bootstrap type
type Bootstrap struct {
	mock.Mock
}

// Close provides a mock function with given fields: ctx
func (_m *Bootstrap) Close(ctx context.Context) {
	_m.Called(ctx)
}

// Init provides a mock function with given fields: ctx, cfg
func (_m *Bootstrap) Init(ctx context.Context, cfg interface{}) error {
	ret := _m.Called(ctx, cfg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, cfg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: ctx
func (_m *Bootstrap) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBootstrap creates a new instance of Bootstrap. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBootstrap(t interface {
	mock.TestingT
	Cleanup(func())
}) *Bootstrap {
	mock := &Bootstrap{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
