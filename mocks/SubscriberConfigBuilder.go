// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	kafka "github.com/Alibay/go-kit/kafka"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// SubscriberConfigBuilder is an autogenerated mock type for the SubscriberConfigBuilder type
type SubscriberConfigBuilder struct {
	mock.Mock
}

// BatchTimeout provides a mock function with given fields: to
func (_m *SubscriberConfigBuilder) BatchTimeout(to time.Duration) kafka.SubscriberConfigBuilder {
	ret := _m.Called(to)

	var r0 kafka.SubscriberConfigBuilder
	if rf, ok := ret.Get(0).(func(time.Duration) kafka.SubscriberConfigBuilder); ok {
		r0 = rf(to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kafka.SubscriberConfigBuilder)
		}
	}

	return r0
}

// Build provides a mock function with given fields:
func (_m *SubscriberConfigBuilder) Build() *kafka.SubscriberConfig {
	ret := _m.Called()

	var r0 *kafka.SubscriberConfig
	if rf, ok := ret.Get(0).(func() *kafka.SubscriberConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafka.SubscriberConfig)
		}
	}

	return r0
}

// CommitInterval provides a mock function with given fields: to
func (_m *SubscriberConfigBuilder) CommitInterval(to time.Duration) kafka.SubscriberConfigBuilder {
	ret := _m.Called(to)

	var r0 kafka.SubscriberConfigBuilder
	if rf, ok := ret.Get(0).(func(time.Duration) kafka.SubscriberConfigBuilder); ok {
		r0 = rf(to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kafka.SubscriberConfigBuilder)
		}
	}

	return r0
}

// GroupId provides a mock function with given fields: groupId
func (_m *SubscriberConfigBuilder) GroupId(groupId string) kafka.SubscriberConfigBuilder {
	ret := _m.Called(groupId)

	var r0 kafka.SubscriberConfigBuilder
	if rf, ok := ret.Get(0).(func(string) kafka.SubscriberConfigBuilder); ok {
		r0 = rf(groupId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kafka.SubscriberConfigBuilder)
		}
	}

	return r0
}

// JoinGroupBackoff provides a mock function with given fields: t
func (_m *SubscriberConfigBuilder) JoinGroupBackoff(t time.Duration) kafka.SubscriberConfigBuilder {
	ret := _m.Called(t)

	var r0 kafka.SubscriberConfigBuilder
	if rf, ok := ret.Get(0).(func(time.Duration) kafka.SubscriberConfigBuilder); ok {
		r0 = rf(t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kafka.SubscriberConfigBuilder)
		}
	}

	return r0
}

// Logging provides a mock function with given fields: v
func (_m *SubscriberConfigBuilder) Logging(v bool) kafka.SubscriberConfigBuilder {
	ret := _m.Called(v)

	var r0 kafka.SubscriberConfigBuilder
	if rf, ok := ret.Get(0).(func(bool) kafka.SubscriberConfigBuilder); ok {
		r0 = rf(v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kafka.SubscriberConfigBuilder)
		}
	}

	return r0
}

// MaxWait provides a mock function with given fields: to
func (_m *SubscriberConfigBuilder) MaxWait(to time.Duration) kafka.SubscriberConfigBuilder {
	ret := _m.Called(to)

	var r0 kafka.SubscriberConfigBuilder
	if rf, ok := ret.Get(0).(func(time.Duration) kafka.SubscriberConfigBuilder); ok {
		r0 = rf(to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kafka.SubscriberConfigBuilder)
		}
	}

	return r0
}

// StartOffset provides a mock function with given fields: v
func (_m *SubscriberConfigBuilder) StartOffset(v int64) kafka.SubscriberConfigBuilder {
	ret := _m.Called(v)

	var r0 kafka.SubscriberConfigBuilder
	if rf, ok := ret.Get(0).(func(int64) kafka.SubscriberConfigBuilder); ok {
		r0 = rf(v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kafka.SubscriberConfigBuilder)
		}
	}

	return r0
}

// Workers provides a mock function with given fields: num
func (_m *SubscriberConfigBuilder) Workers(num int) kafka.SubscriberConfigBuilder {
	ret := _m.Called(num)

	var r0 kafka.SubscriberConfigBuilder
	if rf, ok := ret.Get(0).(func(int) kafka.SubscriberConfigBuilder); ok {
		r0 = rf(num)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kafka.SubscriberConfigBuilder)
		}
	}

	return r0
}

// NewSubscriberConfigBuilder creates a new instance of SubscriberConfigBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscriberConfigBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubscriberConfigBuilder {
	mock := &SubscriberConfigBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
