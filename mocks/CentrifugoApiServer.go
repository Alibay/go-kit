// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	apiproto "github.com/Alibay/go-kit/centrifugo/proto"

	mock "github.com/stretchr/testify/mock"
)

// CentrifugoApiServer is an autogenerated mock type for the CentrifugoApiServer type
type CentrifugoApiServer struct {
	mock.Mock
}

// Batch provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) Batch(_a0 context.Context, _a1 *apiproto.BatchRequest) (*apiproto.BatchResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.BatchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.BatchRequest) (*apiproto.BatchResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.BatchRequest) *apiproto.BatchResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.BatchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.BatchRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockUser provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) BlockUser(_a0 context.Context, _a1 *apiproto.BlockUserRequest) (*apiproto.BlockUserResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.BlockUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.BlockUserRequest) (*apiproto.BlockUserResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.BlockUserRequest) *apiproto.BlockUserResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.BlockUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.BlockUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Broadcast provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) Broadcast(_a0 context.Context, _a1 *apiproto.BroadcastRequest) (*apiproto.BroadcastResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.BroadcastResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.BroadcastRequest) (*apiproto.BroadcastResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.BroadcastRequest) *apiproto.BroadcastResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.BroadcastResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.BroadcastRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelPush provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) CancelPush(_a0 context.Context, _a1 *apiproto.CancelPushRequest) (*apiproto.CancelPushResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.CancelPushResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.CancelPushRequest) (*apiproto.CancelPushResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.CancelPushRequest) *apiproto.CancelPushResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.CancelPushResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.CancelPushRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Channels provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) Channels(_a0 context.Context, _a1 *apiproto.ChannelsRequest) (*apiproto.ChannelsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.ChannelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.ChannelsRequest) (*apiproto.ChannelsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.ChannelsRequest) *apiproto.ChannelsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.ChannelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.ChannelsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Connections provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) Connections(_a0 context.Context, _a1 *apiproto.ConnectionsRequest) (*apiproto.ConnectionsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.ConnectionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.ConnectionsRequest) (*apiproto.ConnectionsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.ConnectionsRequest) *apiproto.ConnectionsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.ConnectionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.ConnectionsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserStatus provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) DeleteUserStatus(_a0 context.Context, _a1 *apiproto.DeleteUserStatusRequest) (*apiproto.DeleteUserStatusResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.DeleteUserStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.DeleteUserStatusRequest) (*apiproto.DeleteUserStatusResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.DeleteUserStatusRequest) *apiproto.DeleteUserStatusResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.DeleteUserStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.DeleteUserStatusRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceList provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) DeviceList(_a0 context.Context, _a1 *apiproto.DeviceListRequest) (*apiproto.DeviceListResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.DeviceListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.DeviceListRequest) (*apiproto.DeviceListResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.DeviceListRequest) *apiproto.DeviceListResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.DeviceListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.DeviceListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceRegister provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) DeviceRegister(_a0 context.Context, _a1 *apiproto.DeviceRegisterRequest) (*apiproto.DeviceRegisterResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.DeviceRegisterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.DeviceRegisterRequest) (*apiproto.DeviceRegisterResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.DeviceRegisterRequest) *apiproto.DeviceRegisterResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.DeviceRegisterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.DeviceRegisterRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceRemove provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) DeviceRemove(_a0 context.Context, _a1 *apiproto.DeviceRemoveRequest) (*apiproto.DeviceRemoveResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.DeviceRemoveResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.DeviceRemoveRequest) (*apiproto.DeviceRemoveResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.DeviceRemoveRequest) *apiproto.DeviceRemoveResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.DeviceRemoveResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.DeviceRemoveRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceTopicList provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) DeviceTopicList(_a0 context.Context, _a1 *apiproto.DeviceTopicListRequest) (*apiproto.DeviceTopicListResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.DeviceTopicListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.DeviceTopicListRequest) (*apiproto.DeviceTopicListResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.DeviceTopicListRequest) *apiproto.DeviceTopicListResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.DeviceTopicListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.DeviceTopicListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceTopicUpdate provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) DeviceTopicUpdate(_a0 context.Context, _a1 *apiproto.DeviceTopicUpdateRequest) (*apiproto.DeviceTopicUpdateResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.DeviceTopicUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.DeviceTopicUpdateRequest) (*apiproto.DeviceTopicUpdateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.DeviceTopicUpdateRequest) *apiproto.DeviceTopicUpdateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.DeviceTopicUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.DeviceTopicUpdateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceUpdate provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) DeviceUpdate(_a0 context.Context, _a1 *apiproto.DeviceUpdateRequest) (*apiproto.DeviceUpdateResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.DeviceUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.DeviceUpdateRequest) (*apiproto.DeviceUpdateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.DeviceUpdateRequest) *apiproto.DeviceUpdateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.DeviceUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.DeviceUpdateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Disconnect provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) Disconnect(_a0 context.Context, _a1 *apiproto.DisconnectRequest) (*apiproto.DisconnectResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.DisconnectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.DisconnectRequest) (*apiproto.DisconnectResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.DisconnectRequest) *apiproto.DisconnectResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.DisconnectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.DisconnectRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserStatus provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) GetUserStatus(_a0 context.Context, _a1 *apiproto.GetUserStatusRequest) (*apiproto.GetUserStatusResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.GetUserStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.GetUserStatusRequest) (*apiproto.GetUserStatusResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.GetUserStatusRequest) *apiproto.GetUserStatusResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.GetUserStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.GetUserStatusRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// History provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) History(_a0 context.Context, _a1 *apiproto.HistoryRequest) (*apiproto.HistoryResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.HistoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.HistoryRequest) (*apiproto.HistoryResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.HistoryRequest) *apiproto.HistoryResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.HistoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.HistoryRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HistoryRemove provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) HistoryRemove(_a0 context.Context, _a1 *apiproto.HistoryRemoveRequest) (*apiproto.HistoryRemoveResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.HistoryRemoveResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.HistoryRemoveRequest) (*apiproto.HistoryRemoveResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.HistoryRemoveRequest) *apiproto.HistoryRemoveResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.HistoryRemoveResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.HistoryRemoveRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Info provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) Info(_a0 context.Context, _a1 *apiproto.InfoRequest) (*apiproto.InfoResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.InfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.InfoRequest) (*apiproto.InfoResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.InfoRequest) *apiproto.InfoResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.InfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.InfoRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvalidateUserTokens provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) InvalidateUserTokens(_a0 context.Context, _a1 *apiproto.InvalidateUserTokensRequest) (*apiproto.InvalidateUserTokensResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.InvalidateUserTokensResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.InvalidateUserTokensRequest) (*apiproto.InvalidateUserTokensResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.InvalidateUserTokensRequest) *apiproto.InvalidateUserTokensResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.InvalidateUserTokensResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.InvalidateUserTokensRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Presence provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) Presence(_a0 context.Context, _a1 *apiproto.PresenceRequest) (*apiproto.PresenceResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.PresenceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.PresenceRequest) (*apiproto.PresenceResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.PresenceRequest) *apiproto.PresenceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.PresenceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.PresenceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PresenceStats provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) PresenceStats(_a0 context.Context, _a1 *apiproto.PresenceStatsRequest) (*apiproto.PresenceStatsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.PresenceStatsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.PresenceStatsRequest) (*apiproto.PresenceStatsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.PresenceStatsRequest) *apiproto.PresenceStatsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.PresenceStatsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.PresenceStatsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Publish provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) Publish(_a0 context.Context, _a1 *apiproto.PublishRequest) (*apiproto.PublishResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.PublishResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.PublishRequest) (*apiproto.PublishResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.PublishRequest) *apiproto.PublishResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.PublishResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.PublishRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RPC provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) RPC(_a0 context.Context, _a1 *apiproto.RPCRequest) (*apiproto.RPCResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.RPCResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.RPCRequest) (*apiproto.RPCResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.RPCRequest) *apiproto.RPCResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.RPCResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.RPCRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RateLimit provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) RateLimit(_a0 context.Context, _a1 *apiproto.RateLimitRequest) (*apiproto.RateLimitResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.RateLimitResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.RateLimitRequest) (*apiproto.RateLimitResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.RateLimitRequest) *apiproto.RateLimitResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.RateLimitResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.RateLimitRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Refresh provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) Refresh(_a0 context.Context, _a1 *apiproto.RefreshRequest) (*apiproto.RefreshResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.RefreshResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.RefreshRequest) (*apiproto.RefreshResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.RefreshRequest) *apiproto.RefreshResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.RefreshResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.RefreshRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeToken provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) RevokeToken(_a0 context.Context, _a1 *apiproto.RevokeTokenRequest) (*apiproto.RevokeTokenResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.RevokeTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.RevokeTokenRequest) (*apiproto.RevokeTokenResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.RevokeTokenRequest) *apiproto.RevokeTokenResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.RevokeTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.RevokeTokenRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendPushNotification provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) SendPushNotification(_a0 context.Context, _a1 *apiproto.SendPushNotificationRequest) (*apiproto.SendPushNotificationResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.SendPushNotificationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.SendPushNotificationRequest) (*apiproto.SendPushNotificationResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.SendPushNotificationRequest) *apiproto.SendPushNotificationResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.SendPushNotificationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.SendPushNotificationRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Subscribe provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) Subscribe(_a0 context.Context, _a1 *apiproto.SubscribeRequest) (*apiproto.SubscribeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.SubscribeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.SubscribeRequest) (*apiproto.SubscribeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.SubscribeRequest) *apiproto.SubscribeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.SubscribeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.SubscribeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnblockUser provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) UnblockUser(_a0 context.Context, _a1 *apiproto.UnblockUserRequest) (*apiproto.UnblockUserResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.UnblockUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.UnblockUserRequest) (*apiproto.UnblockUserResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.UnblockUserRequest) *apiproto.UnblockUserResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.UnblockUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.UnblockUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unsubscribe provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) Unsubscribe(_a0 context.Context, _a1 *apiproto.UnsubscribeRequest) (*apiproto.UnsubscribeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.UnsubscribeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.UnsubscribeRequest) (*apiproto.UnsubscribeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.UnsubscribeRequest) *apiproto.UnsubscribeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.UnsubscribeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.UnsubscribeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePushStatus provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) UpdatePushStatus(_a0 context.Context, _a1 *apiproto.UpdatePushStatusRequest) (*apiproto.UpdatePushStatusResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.UpdatePushStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.UpdatePushStatusRequest) (*apiproto.UpdatePushStatusResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.UpdatePushStatusRequest) *apiproto.UpdatePushStatusResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.UpdatePushStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.UpdatePushStatusRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserStatus provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) UpdateUserStatus(_a0 context.Context, _a1 *apiproto.UpdateUserStatusRequest) (*apiproto.UpdateUserStatusResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.UpdateUserStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.UpdateUserStatusRequest) (*apiproto.UpdateUserStatusResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.UpdateUserStatusRequest) *apiproto.UpdateUserStatusResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.UpdateUserStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.UpdateUserStatusRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserTopicList provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) UserTopicList(_a0 context.Context, _a1 *apiproto.UserTopicListRequest) (*apiproto.UserTopicListResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.UserTopicListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.UserTopicListRequest) (*apiproto.UserTopicListResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.UserTopicListRequest) *apiproto.UserTopicListResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.UserTopicListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.UserTopicListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserTopicUpdate provides a mock function with given fields: _a0, _a1
func (_m *CentrifugoApiServer) UserTopicUpdate(_a0 context.Context, _a1 *apiproto.UserTopicUpdateRequest) (*apiproto.UserTopicUpdateResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *apiproto.UserTopicUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.UserTopicUpdateRequest) (*apiproto.UserTopicUpdateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apiproto.UserTopicUpdateRequest) *apiproto.UserTopicUpdateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiproto.UserTopicUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apiproto.UserTopicUpdateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedCentrifugoApiServer provides a mock function with given fields:
func (_m *CentrifugoApiServer) mustEmbedUnimplementedCentrifugoApiServer() {
	_m.Called()
}

// NewCentrifugoApiServer creates a new instance of CentrifugoApiServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCentrifugoApiServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *CentrifugoApiServer {
	mock := &CentrifugoApiServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
